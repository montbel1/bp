import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { CalendarService } from "@/lib/calendar-service";

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.email) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const body = await request.json();
    const { type = "all" } = body;

    let generatedEvents = [];

    switch (type) {
      case "accounting":
        generatedEvents = await CalendarService.generateAccountingEvents(session.user.email);
        break;
      case "practice-management":
        generatedEvents = await CalendarService.generatePracticeManagementEvents(session.user.email);
        break;
      case "tax":
        generatedEvents = await CalendarService.generateTaxEvents(session.user.email);
        break;
      case "all":
      default:
        await CalendarService.autoGenerateAllEvents(session.user.email);
        return NextResponse.json({
          message: "All calendar events auto-generated successfully",
          type: "all",
        });
    }

    if (type !== "all") {
      await CalendarService.createEventsFromAutoGenerated(session.user.email, generatedEvents);
    }

    return NextResponse.json({
      message: `${type} calendar events auto-generated successfully`,
      type,
      count: generatedEvents.length,
    });
  } catch (error) {
    console.error("Error auto-generating calendar events:", error);
    return NextResponse.json(
      { error: "Failed to auto-generate calendar events" },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.email) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const type = searchParams.get("type") || "all";

    let generatedEvents = [];

    switch (type) {
      case "accounting":
        generatedEvents = await CalendarService.generateAccountingEvents(session.user.email);
        break;
      case "practice-management":
        generatedEvents = await CalendarService.generatePracticeManagementEvents(session.user.email);
        break;
      case "tax":
        generatedEvents = await CalendarService.generateTaxEvents(session.user.email);
        break;
      case "all":
      default:
        const accountingEvents = await CalendarService.generateAccountingEvents(session.user.email);
        const practiceManagementEvents = await CalendarService.generatePracticeManagementEvents(session.user.email);
        const taxEvents = await CalendarService.generateTaxEvents(session.user.email);
        generatedEvents = [...accountingEvents, ...practiceManagementEvents, ...taxEvents];
        break;
    }

    return NextResponse.json({
      events: generatedEvents,
      type,
      count: generatedEvents.length,
    });
  } catch (error) {
    console.error("Error previewing auto-generated events:", error);
    return NextResponse.json(
      { error: "Failed to preview auto-generated events" },
      { status: 500 }
    );
  }
} 
