"use client";

import { useState, useEffect } from "react";
import { Calendar, momentLocalizer } from "react-big-calendar";
import moment from "moment";
import "react-big-calendar/lib/css/react-big-calendar.css";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { CalendarIcon, PlusIcon, FilterIcon, RefreshCw, Trash2, Zap } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { toast } from "sonner";

const localizer = momentLocalizer(moment);

interface CalendarEvent {
  id: string;
  title: string;
  description?: string;
  start: Date;
  end: Date;
  allDay?: boolean;
  location?: string;
  status: "SCHEDULED" | "IN_PROGRESS" | "COMPLETED" | "CANCELLED";
  priority: "LOW" | "MEDIUM" | "HIGH" | "URGENT";
  type: "ACCOUNTING" | "PRACTICE_MANAGEMENT" | "GENERAL";
  source?: string;
  isAutoGenerated?: boolean;
}

interface EventFormData {
  title: string;
  description: string;
  startDate: string;
  startTime: string;
  endDate: string;
  endTime: string;
  allDay: boolean;
  location: string;
  type: string;
  priority: string;
}

export default function CalendarPage() {
  const [events, setEvents] = useState<CalendarEvent[]>([]);
  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEventDialogOpen, setIsEventDialogOpen] = useState(false);
  const [isAutoGenerating, setIsAutoGenerating] = useState(false);
  const [filters, setFilters] = useState({
    showAccounting: true,
    showPracticeManagement: true,
    showGeneral: true,
    showCompleted: false,
  });

  const [formData, setFormData] = useState<EventFormData>({
    title: "",
    description: "",
    startDate: "",
    startTime: "",
    endDate: "",
    endTime: "",
    allDay: false,
    location: "",
    type: "GENERAL",
    priority: "MEDIUM",
  });

  // Sample events - these would come from your API
  const sampleEvents: CalendarEvent[] = [
    {
      id: "1",
      title: "1040 - Prepare Tax Return",
      description: "Complete tax return for client John Smith",
      start: new Date(2024, 11, 15, 9, 0),
      end: new Date(2024, 11, 15, 17, 0),
      status: "SCHEDULED",
      priority: "HIGH",
      type: "ACCOUNTING",
      source: "Bookkeeping Module",
      isAutoGenerated: true,
    },
    {
      id: "2",
      title: "1040 - E-file Return",
      description: "E-file completed tax return",
      start: new Date(2024, 11, 16, 10, 0),
      end: new Date(2024, 11, 16, 11, 0),
      status: "SCHEDULED",
      priority: "URGENT",
      type: "ACCOUNTING",
      source: "Bookkeeping Module",
      isAutoGenerated: true,
    },
    {
      id: "3",
      title: "Bookkeeping - Reconcile",
      description: "Reconcile bank accounts for December",
      start: new Date(2024, 11, 17, 14, 0),
      end: new Date(2024, 11, 17, 16, 0),
      status: "SCHEDULED",
      priority: "MEDIUM",
      type: "ACCOUNTING",
      source: "Bookkeeping Module",
      isAutoGenerated: true,
    },
    {
      id: "4",
      title: "Client Meeting - ABC Corp",
      description: "Quarterly review meeting",
      start: new Date(2024, 11, 18, 13, 0),
      end: new Date(2024, 11, 18, 14, 30),
      status: "SCHEDULED",
      priority: "HIGH",
      type: "PRACTICE_MANAGEMENT",
      source: "Flow Module",
      isAutoGenerated: false,
    },
    {
      id: "5",
      title: "Project Deadline - Tax Season Prep",
      description: "Complete all tax season preparations",
      start: new Date(2024, 11, 20, 9, 0),
      end: new Date(2024, 11, 20, 17, 0),
      status: "SCHEDULED",
      priority: "URGENT",
      type: "PRACTICE_MANAGEMENT",
      source: "Flow Module",
      isAutoGenerated: false,
    },
  ];

  useEffect(() => {
    setEvents(sampleEvents);
  }, []);

  const filteredEvents = events.filter(event => {
    if (!filters.showAccounting && event.type === "ACCOUNTING") return false;
    if (!filters.showPracticeManagement && event.type === "PRACTICE_MANAGEMENT") return false;
    if (!filters.showGeneral && event.type === "GENERAL") return false;
    if (!filters.showCompleted && event.status === "COMPLETED") return false;
    return true;
  });

  const eventStyleGetter = (event: CalendarEvent) => {
    let style: any = {
      backgroundColor: "#3b82f6",
      borderRadius: "4px",
      opacity: 0.8,
      color: "white",
      border: "0px",
      display: "block",
    };

    if (event.priority === "URGENT") {
      style.backgroundColor = "#ef4444";
    } else if (event.priority === "HIGH") {
      style.backgroundColor = "#f59e0b";
    } else if (event.priority === "MEDIUM") {
      style.backgroundColor = "#3b82f6";
    } else {
      style.backgroundColor = "#10b981";
    }

    if (event.status === "COMPLETED") {
      style.opacity = 0.5;
    }

    // Add border for auto-generated events
    if (event.isAutoGenerated) {
      style.border = "2px dashed #ffffff";
    }

    return { style };
  };

  const handleEventSelect = (event: CalendarEvent) => {
    setSelectedEvent(event);
    setIsEventDialogOpen(true);
  };

  const handleCreateEvent = async () => {
    if (!formData.title || !formData.startDate) {
      toast.error("Please fill in required fields");
      return;
    }

    const startDateTime = new Date(`${formData.startDate}T${formData.startTime || "00:00"}`);
    const endDateTime = new Date(`${formData.endDate}T${formData.endTime || "23:59"}`);

    const newEvent: CalendarEvent = {
      id: Date.now().toString(),
      title: formData.title,
      description: formData.description,
      start: startDateTime,
      end: endDateTime,
      allDay: formData.allDay,
      location: formData.location,
      status: "SCHEDULED",
      priority: formData.priority as "LOW" | "MEDIUM" | "HIGH" | "URGENT",
      type: formData.type as "ACCOUNTING" | "PRACTICE_MANAGEMENT" | "GENERAL",
      source: "Manual Entry",
      isAutoGenerated: false,
    };

    setEvents(prev => [...prev, newEvent]);
    setIsCreateDialogOpen(false);
    setFormData({
      title: "",
      description: "",
      startDate: "",
      startTime: "",
      endDate: "",
      endTime: "",
      allDay: false,
      location: "",
      type: "GENERAL",
      priority: "MEDIUM",
    });
    toast.success("Event created successfully!");
  };

  const handleAutoGenerate = async () => {
    setIsAutoGenerating(true);
    try {
      const response = await fetch("/api/calendar/auto-generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ type: "all" }),
      });

      if (response.ok) {
        const result = await response.json();
        toast.success(`Auto-generated ${result.count || 0} events!`);
        
        // Refresh events from API
        const eventsResponse = await fetch("/api/calendar");
        if (eventsResponse.ok) {
          const eventsData = await eventsResponse.json();
          setEvents(eventsData.events || []);
        }
      } else {
        toast.error("Failed to auto-generate events");
      }
    } catch (error) {
      console.error("Error auto-generating events:", error);
      toast.error("Error auto-generating events");
    } finally {
      setIsAutoGenerating(false);
    }
  };

  const handleDeleteEvent = (eventId: string) => {
    setEvents(prev => prev.filter(event => event.id !== eventId));
    setIsEventDialogOpen(false);
    toast.success("Event deleted successfully!");
  };

  const handleCreateSampleData = async () => {
    try {
      const response = await fetch("/api/calendar/sample-data", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const result = await response.json();
        toast.success(`Sample data created: ${result.data.recurringTransactions} transactions, ${result.data.invoices} invoices, ${result.data.jobs} jobs, ${result.data.tasks} tasks`);
      } else {
        toast.error("Failed to create sample data");
      }
    } catch (error) {
      console.error("Error creating sample data:", error);
      toast.error("Error creating sample data");
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "URGENT": return "bg-red-500";
      case "HIGH": return "bg-orange-500";
      case "MEDIUM": return "bg-blue-500";
      case "LOW": return "bg-green-500";
      default: return "bg-gray-500";
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case "ACCOUNTING": return "bg-purple-500";
      case "PRACTICE_MANAGEMENT": return "bg-indigo-500";
      case "GENERAL": return "bg-gray-500";
      default: return "bg-gray-500";
    }
  };

  return (
    <div className="container mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Calendar</h1>
          <p className="text-gray-600">Manage your accounting and practice management tasks</p>
        </div>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleAutoGenerate}
            disabled={isAutoGenerating}
          >
            <Zap className="w-4 h-4 mr-2" />
            {isAutoGenerating ? "Generating..." : "Auto-Generate"}
          </Button>
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleCreateSampleData}
          >
            <CalendarIcon className="w-4 h-4 mr-2" />
            Create Sample Data
          </Button>
          <Button variant="outline" size="sm">
            <RefreshCw className="w-4 h-4 mr-2" />
            Sync Calendars
          </Button>
          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <PlusIcon className="w-4 h-4 mr-2" />
                Add Event
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[500px]">
              <DialogHeader>
                <DialogTitle>Create New Event</DialogTitle>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="title" className="text-right">
                    Title *
                  </Label>
                  <Input 
                    id="title" 
                    className="col-span-3"
                    value={formData.title}
                    onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="description" className="text-right">
                    Description
                  </Label>
                  <Textarea 
                    id="description" 
                    className="col-span-3"
                    value={formData.description}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="startDate" className="text-right">
                    Start Date *
                  </Label>
                  <Input 
                    id="startDate" 
                    type="date"
                    className="col-span-3"
                    value={formData.startDate}
                    onChange={(e) => setFormData(prev => ({ ...prev, startDate: e.target.value }))}
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="startTime" className="text-right">
                    Start Time
                  </Label>
                  <Input 
                    id="startTime" 
                    type="time"
                    className="col-span-3"
                    value={formData.startTime}
                    onChange={(e) => setFormData(prev => ({ ...prev, startTime: e.target.value }))}
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="endDate" className="text-right">
                    End Date
                  </Label>
                  <Input 
                    id="endDate" 
                    type="date"
                    className="col-span-3"
                    value={formData.endDate}
                    onChange={(e) => setFormData(prev => ({ ...prev, endDate: e.target.value }))}
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="endTime" className="text-right">
                    End Time
                  </Label>
                  <Input 
                    id="endTime" 
                    type="time"
                    className="col-span-3"
                    value={formData.endTime}
                    onChange={(e) => setFormData(prev => ({ ...prev, endTime: e.target.value }))}
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="location" className="text-right">
                    Location
                  </Label>
                  <Input 
                    id="location" 
                    className="col-span-3"
                    value={formData.location}
                    onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="type" className="text-right">
                    Type
                  </Label>
                  <Select value={formData.type} onValueChange={(value) => setFormData(prev => ({ ...prev, type: value }))}>
                    <SelectTrigger className="col-span-3">
                      <SelectValue placeholder="Select type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="accounting">Accounting</SelectItem>
                      <SelectItem value="practice-management">Practice Management</SelectItem>
                      <SelectItem value="general">General</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="priority" className="text-right">
                    Priority
                  </Label>
                  <Select value={formData.priority} onValueChange={(value) => setFormData(prev => ({ ...prev, priority: value }))}>
                    <SelectTrigger className="col-span-3">
                      <SelectValue placeholder="Select priority" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">Low</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="urgent">Urgent</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="allDay" className="text-right">
                    All Day
                  </Label>
                  <Switch 
                    id="allDay"
                    checked={formData.allDay}
                    onCheckedChange={(checked) => setFormData(prev => ({ ...prev, allDay: checked }))}
                    className="col-span-3"
                  />
                </div>
              </div>
              <div className="flex gap-2 justify-end">
                <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
                  Cancel
                </Button>
                <Button onClick={handleCreateEvent}>
                  Create Event
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Filters */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FilterIcon className="w-5 h-5" />
            Filters
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-4">
            <div className="flex items-center space-x-2">
              <Switch
                id="accounting"
                checked={filters.showAccounting}
                onCheckedChange={(checked) =>
                  setFilters(prev => ({ ...prev, showAccounting: checked }))
                }
              />
              <Label htmlFor="accounting">Accounting Tasks</Label>
            </div>
            <div className="flex items-center space-x-2">
              <Switch
                id="practice-management"
                checked={filters.showPracticeManagement}
                onCheckedChange={(checked) =>
                  setFilters(prev => ({ ...prev, showPracticeManagement: checked }))
                }
              />
              <Label htmlFor="practice-management">Practice Management</Label>
            </div>
            <div className="flex items-center space-x-2">
              <Switch
                id="general"
                checked={filters.showGeneral}
                onCheckedChange={(checked) =>
                  setFilters(prev => ({ ...prev, showGeneral: checked }))
                }
              />
              <Label htmlFor="general">General Events</Label>
            </div>
            <div className="flex items-center space-x-2">
              <Switch
                id="completed"
                checked={filters.showCompleted}
                onCheckedChange={(checked) =>
                  setFilters(prev => ({ ...prev, showCompleted: checked }))
                }
              />
              <Label htmlFor="completed">Show Completed</Label>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Calendar */}
      <Card>
        <CardContent className="p-0">
          <div style={{ height: "600px" }}>
            <Calendar
              localizer={localizer}
              events={filteredEvents}
              startAccessor="start"
              endAccessor="end"
              style={{ height: "100%" }}
              eventPropGetter={eventStyleGetter}
              onSelectEvent={handleEventSelect}
              views={["month", "week", "day", "agenda"]}
              defaultView="month"
              selectable
              popup
            />
          </div>
        </CardContent>
      </Card>

      {/* Event Details Dialog */}
      <Dialog open={isEventDialogOpen} onOpenChange={setIsEventDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>Event Details</DialogTitle>
          </DialogHeader>
          {selectedEvent && (
            <div className="space-y-4">
              <div>
                <h3 className="text-lg font-semibold">{selectedEvent.title}</h3>
                <p className="text-gray-600">{selectedEvent.description}</p>
              </div>
              
              <div className="flex gap-2">
                <Badge className={getPriorityColor(selectedEvent.priority)}>
                  {selectedEvent.priority}
                </Badge>
                <Badge className={getTypeColor(selectedEvent.type)}>
                  {selectedEvent.type.replace("_", " ")}
                </Badge>
                <Badge variant="outline">
                  {selectedEvent.status}
                </Badge>
                {selectedEvent.isAutoGenerated && (
                  <Badge variant="secondary">
                    Auto-Generated
                  </Badge>
                )}
              </div>

              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="font-medium">Start:</span>
                  <p>{selectedEvent.start.toLocaleString()}</p>
                </div>
                <div>
                  <span className="font-medium">End:</span>
                  <p>{selectedEvent.end.toLocaleString()}</p>
                </div>
                {selectedEvent.location && (
                  <div className="col-span-2">
                    <span className="font-medium">Location:</span>
                    <p>{selectedEvent.location}</p>
                  </div>
                )}
                {selectedEvent.source && (
                  <div className="col-span-2">
                    <span className="font-medium">Source:</span>
                    <p>{selectedEvent.source}</p>
                  </div>
                )}
              </div>

              <div className="flex gap-2">
                <Button variant="outline" className="flex-1">
                  Edit Event
                </Button>
                <Button variant="outline" className="flex-1">
                  Mark Complete
                </Button>
                <Button 
                  variant="destructive" 
                  className="flex-1"
                  onClick={() => handleDeleteEvent(selectedEvent.id)}
                >
                  <Trash2 className="w-4 h-4 mr-2" />
                  Delete
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
} 